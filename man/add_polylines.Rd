% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/google_map_layers.R
\name{add_polylines}
\alias{add_polylines}
\title{Add polyline}
\usage{
add_polylines(map, data = get_map_data(map), polyline = NULL, lat = NULL,
  lon = NULL, id = NULL, geodesic = NULL, stroke_colour = NULL,
  stroke_weight = NULL, stroke_opacity = NULL, info_window = NULL,
  mouse_over = NULL, mouse_over_group = NULL, update_map_view = TRUE,
  layer_id = NULL)
}
\arguments{
\item{map}{a googleway map object created from \code{google_map()}}

\item{data}{data frame containing at least two columns, one specifying the latitude coordinates, and the other specifying the longitude. If Null, the data passed into \code{google_map()} will be used.}

\item{polyline}{string specifying the column of \code{data} containing the encoded 'polyline'
#' @param lat string specifying the column of \code{data} containing the 'latitude' coordinates. If left NULL, a best-guess will be made}

\item{lon}{string specifying the column of \code{data} containing the 'longitude' coordinates. If left NULL, a best-guess will be made}

\item{id}{string specifying the column containing an identifier for a polyline}

\item{geodesic}{logical}

\item{stroke_colour}{either a string specifying the column of \code{data} containing the stroke colour of each circle, or a valid hexadecimal numeric HTML style to be applied to all the circles}

\item{stroke_weight}{either a string specifying the column of \code{data} containing the stroke weight of each circle, or a number indicating the width of pixels in the line to be applied to all the circles}

\item{stroke_opacity}{either a string specifying the column of \code{data} containing the stroke opacity of each circle, or a value between 0 and 1 that will be aplied to all the circles}

\item{info_window}{string specifying the column of data to display in an info window when a polygon is clicked}

\item{mouse_over}{string specifying the column of data to display when the mouse rolls over the polygon}

\item{mouse_over_group}{string specifying the column of data specifying which groups of polylines to highlight on mouseover}

\item{update_map_view}{logical specifying if the map should re-centre according to the polyline.}

\item{layer_id}{single value specifying an id for the layer.}
}
\description{
Add a polyline to a google map
}
\note{
using \code{update_map_view = TRUE} for multiple polylines may be slow, so it may be more appropriate to set the view of the map using the location argument of \code{google_map()}
}
\examples{
\dontrun{

flights <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv')
flights$id <- seq_len(nrow(flights))


## encode the routes as polylines
lst <- lapply(unique(flights$id), function(x){
  lat = c(flights[flights["id"] == x, c("start_lat")], flights[flights["id"] == x, c("end_lat")])
  lon = c(flights[flights["id"] == x, c("start_lon")], flights[flights["id"] == x, c("end_lon")])
  data.frame(id = x, polyline = gepaf::encodePolyline(data.frame(lat = lat, lon = lon)))
})

flights <- merge(flights, do.call(rbind, lst), by = "id")

## style is taken from https://snazzymaps.com/style/6617/dark-greys

map_key <- "your_api_key"
google_map(key = map_key, style = style) \%>\%
  add_polylines(data = flights, polyline = "polyline", mouse_over_group = "airport1",
               stroke_weight = 1, stroke_opacity = 0.3, stroke_colour = "#ccffff")


}
}

